// <auto-generated />
using System;
using BankingLedger.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BankingLedger.Migrations
{
    [DbContext(typeof(BankingContext))]
    [Migration("20190130101803_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028");

            modelBuilder.Entity("BankingLedger.Models.BankAccount", b =>
                {
                    b.Property<int>("accountNumber")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("balance");

                    b.Property<int>("userId");

                    b.HasKey("accountNumber");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("BankingLedger.Models.Transaction", b =>
                {
                    b.Property<int>("transactionNo")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("accountNumber");

                    b.Property<decimal>("amount");

                    b.Property<DateTime>("transactionTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("type");

                    b.Property<int>("userId");

                    b.HasKey("transactionNo");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BankingLedger.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("firstName")
                        .IsRequired();

                    b.Property<string>("lastName")
                        .IsRequired();

                    b.Property<string>("passwordHash")
                        .IsRequired();

                    b.Property<byte[]>("passwordSalt")
                        .IsRequired();

                    b.Property<string>("userName")
                        .IsRequired();

                    b.HasKey("userId");

                    b.HasAlternateKey("userName");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
